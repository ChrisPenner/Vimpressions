[1] Run the `vimtutor` command (on the terminal) and complete Section 1
[2] Remember, use `hjkl` to move around.
[3] `i` enters insert mode, where vim works like most editors.
[4] In `normal` mode every key is its own command.
    Press `<escape>` to return to normal mode.
    Assume each command is for normal mode unless I say otherwise.
[5] In normal mode `:` enters command mode.
    I'll refer to command mode commands with the {C} label when they come up.
[6] `:w` saves the file. `:q` quits, `:wq` saves and quits!
[7] Do Section 2 of `vimtutor`.
    Going through vimtutor helps you to remember commands you've forgotten.
[8] `:e <file>` opens a file for editing.
[9] If you want to show more tips at a time, run `vimtips numtips 'n'`,
    Where 'n' is the max number of tips to show at a time.
[10] {C} Curious what a key does? `:help <keysequence>` to learn!
[11] Hitting escape is annoying. It's far away.
     Try rebinding your caps-lock key to escape instead! (try 'Seil'!)
[12] If you've got a tip mastered, run `vimtips clear 'n'` to clear tip 'n'.
[13] `w` moves the cursor forward by one 'word'
     Try `:help iskeyword` to learn about what makes a 'word'.
[14] `b` moves the cursor backward by one 'word'
[15] `W` moves the cursor forward by one 'WORD'
     A 'WORD' is a contiguous group of non-whitespace characters,
     basically this jumps to past the next space.
     `B` goes back one 'WORD' as the clever among you may have suspected.
[16] `x` deletes the char under the cursor.
     `X` deletes the char before the cursor.
[17] To move to the next tip, run `vimtips next`.
     Make sure you're trying out each tip as you read it!
[18] Try finishing off vimtutor today!
[19] Use `I` to start inserting text at the beginning of the current line.
     Use `A` to insert text at the end of the current line.
[20] Try `u` to undo your mistakes! Hit it multiple times to undo more.
     <C-r> to redo changes, (<C-r> means hold 'control' key and press 'r')
[21] `f<char>` will move forward to the next <char> in the current line.
     `F<char>` does the same, but moves backwards in the current line.
[22] `0` jumps to the beginning of the current line.
     `$` jumps to the end of the line.
[23] `v` starts a visual selection.
     Use any motions you know to extend the selection.
[24] {v} In visual mode, use `d` to delete the selection.
[25] `yw` copies (yanks) one word into the clip-board
     `p` pastes whatever is in the clipboard.
[26] {v} Press `y` to yank the currently selected text to the clipboard.
[27] {v} Use `c` to 'change' your selection,
     That is, to delete it and enter insert mode.
[28] `dd` deletes the current line.
[29] `C` 'changes' from the cursor to the end of the line.
[30] Things like `w`, `f<char>` and `$` are called 'motions'
     Things like `d`, `c`, and `y` are called 'operators'
     Operators use motions to define an area to perform their function on.
     Read up: (:h operator)
[31] In the command `d$`:
     the `d` means 'delete' and the `$` means 'move to end of line'
     So `d$` means 'delete to the end of the line'
     You'll find most operators and motions can be combined in this way.
[32] Oftentimes repeating an operator means "for the whole line"
     E.g. `yy`: yank one line, `dd`: delete one line, `cc`: change one line.
[33] Enter search mode with `/`, type what you're looking for then press enter.
     `?` Searches backwards.
[34] `n` finds the next search result, `N` finds the previous one.
     The behaviour is reversed when the search was started with `?`.
[35] `V` starts a 'line-wise' visual selection.
[36] `.` is a special command. 
     It repeats the last change you made in a new spot.
     E.g. Use `cw` to change a word to something else, then move to a new word
     and press `.`, Vim will change that word to the new word as well!
     This is very helpful for repetitive tasks! See (:h .)

Macro:
f[ldi["aP0"ayi[
